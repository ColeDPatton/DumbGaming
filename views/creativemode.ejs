<!DOCTYPE html>
<html lang="en">

<head>
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-171826103-2"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());

        gtag('config', 'UA-171826103-2');
    </script>

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="A fun game solely developed for the 
                purpose of entertainment. Jump from ledge to ledge to reach 
                the green square while avoiding tricks and traps.">
    <meta name="keywords" content="Dumb Gaming,Dumb game,dumb,gaming,game,
                platformer,fun,entertainment,project,developer,blocks,
                level creator">
    <link rel="stylesheet" href="creativemode.css">
    <title>Dumb Gaming</title>
</head>

<body class="no_select" id="body">
    <header>
        <img src="DumbGamingLogo.svg" class="logo" onclick="homeScreen()" alt="Dumb Gaming logo">

        <div class="navigationBar">
            <button class="navigation" onclick="homeScreen()">Home</button>
            <button class="navigation" onclick="location.href='/community'">Community Levels</button>
            <button class="navigation" onclick="location.href='/creative'">Level Creator</button>
            <button class="navigation">Races</button>
            <button class="navigation" id="logging" onclick="location.href='/login'">Log In</button>
        </div>
        <div class="burger">
            <div class="line1"></div>
            <div class="line2"></div>
            <div class="line3"></div>
        </div>
    </header>
    <div class="mobileNavigation">
        <button class="navigation" onclick="homeScreen()">Home</button>
        <button class="navigation" onclick="location.href='/community'">Community Levels</button>
        <button class="navigation" onclick="location.href='/creative'">Level Creator</button>
        <button class="navigation">Races</button>
        <button class="navigation" id="logging" onclick="location.href='/login'">Log In</button>
    </div>
    <!-- <p class="introduction">Welcome to the level editor. Create levels by dragging blocks from the right-hand side into
        the game.
        You can also delete blocks by dragging them back to the right side of the screen.
        Once a block has been placed, you can click it to select it. Click and drag the selected block to move it,
        drag the corners to resize it, or give it an effect by clicking the 'Effect' buttons along the bottom.
        Bouncy blocks make you jump higher, invisible blocks are hidden from view, ghost blocks look like normal blocks
        but the player moves though them,
        and horizontal, vertical, and circular blocks move around the screen. Combine different effects to create
        cool features in your levels!
    </p> -->
    <section class="main-container" style="display: block;">
        <div id="usernamePlacement">
            <div id="usernamePlacementTop">
                <h3 id="username">Welcome, <%=username%></h3>
            </div>
        </div>

        <div class="level-sources">
            <button id="selected-tab" class="myButton level-source-button" onclick="viewTemplates(0)">Game
                Levels</button>
            <button class="myButton level-source-button" onclick="viewTemplates(1)">Personal Levels</button>
        </div>
        <div class="level-templates community-level" id="sl"></div>
        <div class="level-templates personal-level" id="sl"></div>
        <div class="level-templates game-level" id="sl">
            <img id="campaign-level-1" class="template" src="image1.png" alt="game image" onclick="selectTemplate(1)">
            <img id="campaign-level-2" class="template" src="image2.png" alt="game image" onclick="selectTemplate(2)">
            <img id="campaign-level-3" class="template" src="image3.png" alt="game image" onclick="selectTemplate(3)">
            <img id="campaign-level-4" class="template" src="image4.png" alt="game image" onclick="selectTemplate(4)">
            <img id="campaign-level-5" class="template" src="image1.png" alt="game image" onclick="selectTemplate(5)">
            <img id="campaign-level-6" class="template" src="image2.png" alt="game image" onclick="selectTemplate(6)">
            <img id="campaign-level-7" class="template" src="image3.png" alt="game image" onclick="selectTemplate(7)">
            <img id="campaign-level-8" class="template" src="image4.png" alt="game image" onclick="selectTemplate(8)">
            <img id="campaign-level-9" class="template" src="image1.png" alt="game image" onclick="selectTemplate(9)">
            <img id="campaign-level-10" class="template" src="image2.png" alt="game image" onclick="selectTemplate(10)">
            <img id="campaign-level-11" class="template" src="image3.png" alt="game image" onclick="selectTemplate(11)">
            <img id="campaign-level-12" class="template" src="image4.png" alt="game image" onclick="selectTemplate(12)">
            <img id="campaign-level-13" class="template" src="image4.png" alt="game image" onclick="selectTemplate(13)">
        </div>
        <div class="privateOptions">
            <div class="gameDiv" id="gameDiv">
                <canvas class="canvas" id="canvasId"></canvas>
                <!-- <div class="action-buttons" id="action-buttons">
                    <button class="jump action myButton" id="jump">^</button>
                    <button class="move action myButton" id="left">&lt;-</button>
                    <button class="move action myButton" id="right">-></button>
                </div> -->
                <div class="button-container">
                    <button class="myButton gameButton" onclick="startGame(0)">Test Level</button>
                    <button class="myButton gameButton" onclick="editLevel()">Edit Level</button>
                    <button class="myButton gameButton" onclick="levelEditor()">New Level</button>
                    <button class="myButton gameButton" onclick="homeScreen()">Back</button>
                </div>
            </div>
            <div id="levelOptions">
                <!-- <div id="campaignLevelOptions" style="display: none;">
                    <h3 id="campaign-level-name">Campaign Level</h3>
                </div> -->
                <div id="privateLevelOptions">
                    <h3 id="private-level-name">Private Level</h3>
                    <button class="myButton optionsButton" onclick="saveLevel()">Save Level</button>
                    <button class="myButton optionsButton" id="saveAs" onclick="openForm()">Save As</button>
                    <form id="form">
                        <label for="name"><b>Level Name</b></label>
                        <input id="newLevelName" type="text" placeholder="Enter level's name" name="name" required>
                        <button type="button" class="myButton optionsButton" onclick="saveLevel()">Save</button>
                        <button type="button" class="myButton optionsButton cancel" onclick="closeForm()">Close</button>
                    </form>
                    <button id="makePublicButton" class="myButton optionsButton" onclick="makePublic()">Make
                        Public</button>
                    <button class="myButton optionsButton" id="delete" onclick="openDeletionForm()">Delete
                        Level</button>
                    <form id="deletionForm">
                        <input id="typeDelete" type="text" placeholder="Type 'delete'" name="delete" required>
                        <button type="button" class="myButton optionsButton" onclick="deleteLevel()">Delete</button>
                        <button type="button" class="myButton optionsButton cancel"
                            onclick="closeDeletionForm()">Close</button>
                    </form>
                </div>
                <div id="communityLevelOptions">
                    <h3 id="community-level-name">Public Level</h3>
                    <h3 id="rating">Rate Level</h3>
                    <div class="stars">
                        <span id="star0">☆</span><span id="star1">☆</span><span id="star2">☆</span><span
                            id="star3">☆</span><span id="star4">☆</span>
                    </div>
                    <button id="submitRatingButton" class="myButton optionsButton" onclick="rateLevel()">Submit
                        Rating</button>
                </div>
            </div>
        </div>
        <div class="instructions">
            <h1 class="instructionsTitle">Instructions</h1>
            <div class="Fundamentals">
                <h1>1. Fundamentals</h1>
                <p class="description">
                    There are three main types of blocks you can use to create different levels. There are black
                    blocks, red blocks, and green blocks. The black blocks are the main platforms that the player
                    can stand, run, and jump on. Red blocks will kill the player if they touch them, causing the
                    player to go back to the beginning of the level. The green squares are the goal; once the player
                    touches a green square, they beat the level.
                </p>
                <div class="instructionsText">
                    <h3>Placing Blocks</h3>
                    <p>
                        The blocks available to place are represented by the black, red, and green squares along the far
                        right. To place a block, click on any of these colored square drag it toward the center of the
                        level. Release the mouse or trackpad to place the block.
                    </p>
                    <h3>Editing Blocks</h3>
                    <p>
                        Once a block is placed, you can click on it to select it. You can tell a block is selected
                        because will have a small circle in each corner. You can move a selected block by clicking near
                        the center and dragging it around. You can also resize a block by clicking and dragging on the
                        circles in the corner of the selected block
                    </p>
                    <h3>Deleting Blocks</h3>
                    <p>
                        If you decide you don't want a block in your level anymore, you can click on the unwanted
                        level and drag it past the right side of the screen to delete it.
                    </p>
                </div>
            </div>
            <div class="blockEffects">
                <h1>2. Block Effects</h1>
                <p class="description">
                    Once a block is selected, there are six different effects you can add to it. Simply click on
                    any of the boxes along the bottom to add an effect to the selected block. You can also click on
                    the box again to remove the effect. These effects can all be combined with one another to make
                    unique and exciting levels!
                </p>
                <div class="instructionsText">
                    <h3>Bouncy</h3>
                    <p>
                        The bouncy effect is shown by changing the block to yellow. While standing on a bouncy block, if
                        the player jumps, they'll jump significantly higher. (This effect can not be added to red
                        blocks)
                    </p>
                    <h3>Invisible</h3>
                    <p>
                        The invisible effect hides the selected block from the player. (Pro tip: No one wants to play a
                        level thats entirely invisible)
                    </p>
                    <h3>Ghost</h3>
                    <p>
                        The ghost effect makes the selected block something that the player will pass right through. The
                        player can not stand on, jump on, or run into a ghost block. Red, deadly blocks with the ghost
                        effect will still kill the player if they touch it.
                    </p>
                    <h3>Movement</h3>
                    <p>
                        There are three different types of movement effects: vertical, horizontal, and circular. These
                        make the selected block move up and down, left and right, and around in a cirle respectively.
                        When the horizontal and vertical effects are selected, small circles, similar to the circles in
                        the corner of the selected block will appear. These circles are the range in which the block
                        will move. They can be clicked and dragged to control where the block can move. The circular
                        effect will only have a single circle appear; this is the point that the block will rotate
                        around. For each movement effect there will clickable up and down triangles along the right side
                        to increase and decrease the speed that the selected block moves.
                    </p>
                </div>
            </div>
            <div class="shareYourLevel">
                <h1>3. Share Your Level</h1>
                <p class="description">
                    Once you're done making a level, you can share it so that it shows up on the community page and
                    other players could try it out!
                </p>
                <div class="instructionsText">
                    <h3>Save</h3>
                    <p>
                        If this is a new level, click "save as", to name your level and save it. If the level has been
                        saved before, you can just click "Save Level". Saved levels are shown under the "Personal
                        Levels" tab and can be clicked on to load them.
                    </p>
                    <h3>Publish</h3>
                    <p>
                        When a level is saved and selected from the "Personal Levels" tab, you have the option to click
                        "Make Public" to share your level with other players. Public levels of yours have a yellow
                        border in the personal levels tab.
                    </p>
                </div>
            </div>
        </div>
    </section>
    <footer>
        <div class="about-me footer-text">
            <div class="about-text">
                <h2 class="footer-title">About Me</h2>
                <p>
                    Thanks for visiting my website! My name is Cole Patton and I am the sole developer of this website.
                    This
                    website is a small project of mine that I work on for fun,
                    and acts as a playground for me to experiment with different aspects of full stack development.
                    Please
                    feel free to email me with any advice or suggestions.
                </p>
            </div>
        </div>
        <div class="contact footer-text">
            <div class="contact-text">
                <h2 class="footer-title">Contact</h2>
                <p>
                    For questions, suggestions, or issues with the site, please contact me at
                    <a href="mailto:patton1502@gmail.com">patton1502@gmail.com</a>
                </p>
            </div>
        </div>
    </footer>

    <!-- Start JavaScript -->
    <!-- Start JavaScript -->
    <!-- Start JavaScript -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/2.1.3/TweenMax.min.js"
        integrity="sha256-lPE3wjN2a7ABWHbGz7+MKBJaykyzqCbU96BJWjio86U=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js"></script>
    <script src="block.js"></script>
    <script src="display.js"></script>
    <script src="controller.js"></script>
    <script src="levelEditor.js"></script>
    <script src="game.js"></script>
    <script src="editorNav.js"></script>
    <script>
        levelEditor();
        // loadCustomLevel();
        logIn(<%- JSON.stringify(username) %>);

        function selectTemplate(template) {
            // document.getElementById("campaign-level-name").innerHTML = "Level " + template;
            for (k = 0; k < document.getElementsByClassName("selected-level").length; k++) {
                document.getElementsByClassName("selected-level").item(k).classList.remove("selected-level");
            }
            document.getElementById("campaign-level-" + template).classList.add("selected-level");
            socket.emit('loadGameLevelFromTemplate', { level: template });
            document.getElementById("privateLevelOptions").style.display = "none";
            document.getElementById("communityLevelOptions").style.display = "none";
            document.getElementById("levelOptions").style.display = "none";
            // document.getElementById("levelOptions").style.display = "block";
        }
        function openForm() {
            closeDeletionForm();
            document.getElementById("form").style.display = "block";
            document.getElementById("saveAs").style.display = "none";
        }
        function closeForm() {
            document.getElementById("form").style.display = "none";
            document.getElementById("saveAs").style.display = "inline-block";
        }
        function openDeletionForm() {
            closeForm();
            document.getElementById("deletionForm").style.display = "block";
            document.getElementById("delete").style.display = "none";
        }
        function closeDeletionForm() {
            document.getElementById("deletionForm").style.display = "none";
            document.getElementById("delete").style.display = "inline-block";
        }
        var customTemplatesLoaded = false;
        var publicTemplatesLoaded = false;
        var socket = io();
        function viewTemplates(t) {
            document.getElementById("selected-tab").id = "";
            document.getElementsByClassName("level-source-button")[t].id = "selected-tab";
            if (t === 0) {
                for (i = 0; i < document.getElementsByClassName("personal-level").length; i++)
                    document.getElementsByClassName("personal-level")[i].style.display = "none";
                for (i = 0; i < document.getElementsByClassName("game-level").length; i++)
                    document.getElementsByClassName("game-level")[i].style.display = "inherit";
                for (i = 0; i < document.getElementsByClassName("community-level").length; i++)
                    document.getElementsByClassName("community-level")[i].style.display = "none";
            }
            else if (t === 1) {
                if (!customTemplatesLoaded) {
                    socket.emit('loadCustomLevelNames');
                    customTemplatesLoaded = true;
                }
                for (i = 0; i < document.getElementsByClassName("personal-level").length; i++)
                    document.getElementsByClassName("personal-level")[i].style.display = "inherit";
                for (i = 0; i < document.getElementsByClassName("game-level").length; i++)
                    document.getElementsByClassName("game-level")[i].style.display = "none";
                for (i = 0; i < document.getElementsByClassName("community-level").length; i++)
                    document.getElementsByClassName("community-level")[i].style.display = "none";
                socket.on('loadCustomLevelNamesResponse', function (data) {
                    for (i = 0; i < data.customNames.length; i++) {
                        const name = data.customNames[i].custom_level_name;
                        const customLevel = document.createElement("canvas");
                        customLevel.classList = "template custom-template";
                        customLevel.id = "canvasId" + name;
                        customLevel.onclick = function () {
                            document.getElementById("private-level-name").innerHTML = name;
                            for (k = 0; k < document.getElementsByClassName("selected-level").length; k++) {
                                document.getElementsByClassName("selected-level").item(k).classList.remove("selected-level");
                            }
                            customLevel.classList.add("selected-level");
                            socket.emit('loadCustomLevelFromTemplate', { name: name });
                            document.getElementById("privateLevelOptions").style.display = "block";
                            document.getElementById("communityLevelOptions").style.display = "none";
                            document.getElementById("levelOptions").style.display = "block";
                        }
                        document.body.getElementsByClassName("personal-level").item(0).appendChild(customLevel);
                        socket.emit('loadCustomLevelTemplates', { canvasId: name });
                    }
                    for (i = 0; i < document.getElementsByClassName("personal-level").length; i++)
                        document.getElementsByClassName("personal-level")[i].style.display = "inherit";
                });
            } else if (t === 2) {
                if (!publicTemplatesLoaded) {
                    socket.emit('loadPublicLevelNames');
                    publicTemplatesLoaded = true;
                }
                for (i = 0; i < document.getElementsByClassName("personal-level").length; i++)
                    document.getElementsByClassName("personal-level")[i].style.display = "none";
                for (i = 0; i < document.getElementsByClassName("game-level").length; i++)
                    document.getElementsByClassName("game-level")[i].style.display = "none";
                for (i = 0; i < document.getElementsByClassName("community-level").length; i++)
                    document.getElementsByClassName("community-level")[i].style.display = "inherit";
                socket.on('loadPublicLevelNamesResponse', function (data) {
                    for (i = 0; i < data.publicNames.length; i++) {
                        const name = data.publicNames[i].custom_level_name;
                        const publicLevel = document.createElement("canvas");
                        publicLevel.classList = "template custom-template";
                        publicLevel.id = "publicId" + name;
                        publicLevel.onclick = function () {
                            document.getElementById("community-level-name").innerHTML = name;
                            for (k = 0; k < document.getElementsByClassName("selected-level").length; k++) {
                                document.getElementsByClassName("selected-level").item(k).classList.remove("selected-level");
                            }
                            publicLevel.classList.add("selected-level");
                            socket.emit('loadPublicLevelFromTemplate', { name: name });
                            document.getElementById("privateLevelOptions").style.display = "none";
                            document.getElementById("communityLevelOptions").style.display = "block";
                            document.getElementById("levelOptions").style.display = "block";
                        }
                        document.body.getElementsByClassName("community-level").item(0).appendChild(publicLevel);
                        socket.emit('loadPublicLevelTemplates', { canvasId: name });
                    }
                    for (i = 0; i < document.getElementsByClassName("community-level").length; i++)
                        document.getElementsByClassName("community-level")[i].style.display = "inherit";
                });
            }
        }

        function addStarsOnclick() {
            for (var i = 0; i < 5; i++) {
                const a = i;
                const star = document.getElementById("star" + a);
                star.onclick = function () {
                    for (let j = 0; j < (5 - a); j++) {
                        const element = document.getElementById("star" + (4 - j));
                        element.classList.add("rated");
                    }
                    for (let j = (5 - a); j < 5; j++) {
                        const element = document.getElementById("star" + (4 - j));
                        element.classList.remove("rated");
                    }
                }
            }
        }
        addStarsOnclick();

        function rateLevel() {
            const rating = document.getElementsByClassName("rated").length;
            const level = document.getElementsByClassName("selected-level")[0];
            const levelName = level.id.slice(8, level.id.length);
            socket.emit('ratingLevel', { rating: rating, levelName: levelName });
        }

        // socket.on('ratingLevelResponse', function (data) {
        //     if (data.success) {
        //         document.getElementById("submitRatingButton").innerText = "Rating submitted";
        //     }
        // });

        document.getElementById("logging").onclick = function () {
            location.href = "/logout";
        };
        function loadTheGame() {
            socket.emit('loadCampaignProgress');
        }
        socket.on('saveLevelResponse', function (data) {
            if (data.saved) {
                document.getElementById("private-level-name").innerHTML = data.name;
                closeForm();
                if (!data.newLevel) {
                    document.getElementsByClassName("personal-level")[0].removeChild(document.getElementsByClassName("selected-level")[0]);
                }
                if (customTemplatesLoaded) {
                    const name = data.name;
                    const customLevel = document.createElement("canvas");
                    customLevel.classList = "template custom-template ";
                    if (data.newLevel) {
                        customLevel.classList += "selected-level ";
                    }
                    customLevel.id = "canvasId" + name;
                    customLevel.onclick = function () {
                        document.getElementById("private-level-name").innerHTML = name;
                        for (k = 0; k < document.getElementsByClassName("selected-level").length; k++) {
                            document.getElementsByClassName("selected-level").item(k).classList.remove("selected-level");
                        }
                        customLevel.classList.add("selected-level");
                        socket.emit('loadCustomLevelFromTemplate', { name: name });
                        document.getElementById("privateLevelOptions").style.display = "block";
                        document.getElementById("communityLevelOptions").style.display = "none";
                        document.getElementById("levelOptions").style.display = "block";
                    }
                    document.body.getElementsByClassName("personal-level").item(0).appendChild(customLevel);
                    socket.emit('loadCustomLevelTemplates', { canvasId: name });
                    for (i = 0; i < document.getElementsByClassName("personal-level").length; i++)
                        document.getElementsByClassName("personal-level")[i].style.display = "inherit";
                }
                document.getElementById("newLevelName").value = null;
                viewTemplates(1);
                // document.getElementById("canvasId" + data.name).classList += "selected-level ";
            }
        });
        socket.on('loadCustomResponse', function (data) {
            var lvl = [];
            data.blockData.forEach(block => {
                lvl.push(block);
            });
            loadBlocksIntoTemplateCanvas(lvl, "canvasId" + data.id);
        });
        socket.on('loadPublicResponse', function (data) {
            var lvl = [];
            data.blockData.forEach(block => {
                lvl.push(block);
            });
            loadBlocksIntoTemplateCanvas(lvl, "publicId" + data.id, data.rating);
        });
        socket.on('loadLevelFromTemplateResponse', function (data) {
            loadBlocksFromArray(data.blockData);
            if (data.rating > 0) {
                for (let j = 0; j < data.rating; j++) {
                    const element = document.getElementById("star" + (4 - j));
                    element.classList.add("rated");
                }
                for (let j = data.rating; j < 5; j++) {
                    const element = document.getElementById("star" + (4 - j));
                    element.classList.remove("rated");
                }
            }
        });
        socket.on('changePublicStatusResponse', function (data) {
            const level = document.getElementsByClassName("selected-level")[0];
            if (data.publicStatus === 0) {
                level.classList.add("setAsPublic");
                document.getElementById("makePublicButton").innerText = "Make Private";

                const name = data.name;
                const publicLevel = document.createElement("canvas");
                publicLevel.classList = "template custom-template";
                publicLevel.id = "publicId" + name;
                publicLevel.onclick = function () {
                    document.getElementById("community-level-name").innerHTML = name;
                    for (k = 0; k < document.getElementsByClassName("selected-level").length; k++) {
                        document.getElementsByClassName("selected-level").item(k).classList.remove("selected-level");
                    }
                    publicLevel.classList.add("selected-level");
                    socket.emit('loadPublicLevelFromTemplate', { name: name });
                    document.getElementById("privateLevelOptions").style.display = "none";
                    document.getElementById("communityLevelOptions").style.display = "block";
                    document.getElementById("levelOptions").style.display = "block";
                }
                document.body.getElementsByClassName("community-level").item(0).appendChild(publicLevel);
                socket.emit('loadPublicLevelTemplates', { canvasId: name });

            } else {
                level.classList.remove("setAsPublic");
                document.getElementById("makePublicButton").innerText = "Make Public";
                document.getElementsByClassName("community-level")[0].removeChild(document.getElementById("publicId" + data.name));
            }
            // publicTemplatesLoaded = false;
        });
        function makePublic() {
            if (document.getElementsByClassName("selected-level").length === 0) {
                alert("Need to save the level before you can make it public!");
                return;
            }
            const level = document.getElementsByClassName("selected-level")[0];
            const levelName = level.id.slice(8, level.id.length);
            var public = 0;
            if (level.classList.contains("setAsPublic"))
                public = 1;
            socket.emit('changePublicStatus', { public: public, levelName: levelName });
        }

        function deleteLevel() {
            var deleteCheck = document.getElementById("typeDelete").value;
            if (player.username === null) {
                return;
            }
            if (deleteCheck.toLowerCase() === "delete") {
                const level = document.getElementsByClassName("selected-level")[0];
                if (level) {
                    const levelName = level.id.slice(8, level.id.length);
                    socket.emit('deleteLevel', { levelName: levelName });
                    return;
                } else {
                    alert("Can't delete a level that isn't saved");
                    return;
                }
            }
            alert("Type 'delete' (not including the quotation marks) to delete the level");
        }

        socket.on('terminated', function (data) {
            document.getElementsByClassName("personal-level")[0].removeChild(document.getElementsByClassName("selected-level")[0]);
            levelEditor();
            closeDeletionForm();
            document.getElementById("typeDelete").value = null;
        });
        socket.on('setSessionID', function (data) {
            localStorage.setItem("uid", data.sid);
        })
        socket.on('getSessionID', function (data) {
            const sid = localStorage.getItem("uid");
            socket.emit('getSessionIDResponse', { sid: sid });
        })
    </script>
</body>

</html>